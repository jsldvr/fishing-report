name: Automated Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    # Only run if PR was merged and came from a release branch
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Read package version
        id: package
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Validate release branch version
        run: |
          # Extract version from the source branch name (e.g., release/1.2.3 -> 1.2.3)
          BRANCH_VERSION="${{ github.event.pull_request.head.ref }}"
          BRANCH_VERSION="${BRANCH_VERSION#release/}"
          if [ -z "$BRANCH_VERSION" ]; then
            echo "Could not determine release branch version from ${{ github.event.pull_request.head.ref }}"
            exit 1
          fi
          if [ "$BRANCH_VERSION" != "${{ steps.package.outputs.version }}" ]; then
            echo "Branch version ($BRANCH_VERSION) does not match package.json version (${{ steps.package.outputs.version }})"
            exit 1
          fi

      - name: Create tag and release
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.package.outputs.version }}';
            const tag = `v${version}`;
            const releaseName = `Release ${version}`;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            async function ensureTag() {
              try {
                await github.rest.git.getRef({ owner, repo, ref: `tags/${tag}` });
                core.info(`Tag ${tag} already exists.`);
              } catch (error) {
                if (error.status === 404) {
                  await github.rest.git.createRef({
                    owner,
                    repo,
                    ref: `refs/tags/${tag}`,
                    sha: process.env.GITHUB_SHA,
                  });
                  core.info(`Created tag ${tag}.`);
                } else {
                  throw error;
                }
              }
            }

            async function ensureRelease() {
              try {
                await github.rest.repos.getReleaseByTag({ owner, repo, tag });
                core.info(`Release for ${tag} already exists.`);
              } catch (error) {
                if (error.status === 404) {
                  await github.rest.repos.createRelease({
                    owner,
                    repo,
                    tag_name: tag,
                    name: releaseName,
                    target_commitish: process.env.GITHUB_SHA,
                    body: `Automated release for version ${version}.`,
                  });
                  core.info(`Created release ${releaseName}.`);
                } else {
                  throw error;
                }
              }
            }

            await ensureTag();
            await ensureRelease();
